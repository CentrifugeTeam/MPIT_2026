services:
  # Инфраструктура (запускается первой)
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_DB: postgres-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    ports:
      - "5446:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-files:
    image: postgres:15
    container_name: postgres-files
    environment:
      POSTGRES_DB: files_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_files_data:/var/lib/postgresql/data
    ports:
      - "5447:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Бэкенд сервисы (запускаются после инфраструктуры)
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      target: development
    container_name: auth-service
    ports:
      - "8002:8002"
    environment:
      - SECRET_KEY=your-secret-key-here-dev
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres-db
      - DB_HOST=postgres-db
    depends_on:
      postgres-db:
        condition: service_healthy
    volumes:
      - ./auth-service:/app
    networks:
      - app-network
    restart: unless-stopped

  bff-service:
    build:
      context: ./bff-service
      dockerfile: Dockerfile
      target: development
    container_name: bff-service
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=your-secret-key-here-dev
      - ALGORITHM=HS256
      - AUTH_SERVICE_URL=http://auth-service:8002
      - NOTIFICATION_SERVICE_URL=http://notification-service:8007
      - FILES_SERVICE_URL=http://files-service:8006
      - PROJECTS_SERVICE_URL=http://projects-service:8004
      - GENERATOR_SERVICE_URL=http://generator-service:8005
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin123
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - auth-service
    volumes:
      - ./bff-service:/app
    networks:
      - app-network
    restart: unless-stopped

  # ========== TEMPORARILY DISABLED ==========
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      target: development
    container_name: notification-service
    ports:
      - "8007:8007"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres-db
      - DB_HOST=postgres-db
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin123
      - RABBITMQ_HOST=rabbitmq
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  email-worker:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: email-worker
    command: python email_worker.py
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres-db
      - DB_HOST=postgres-db
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin123
      - RABBITMQ_HOST=rabbitmq
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
      notification-service:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  files-service:
    build:
      context: ./files-service
      dockerfile: Dockerfile
    container_name: files-service
    ports:
      - "8006:8006"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-files:5432/files_db
      - STORAGE_PATH=/app/storage
      - MAX_FILE_SIZE=10485760
    depends_on:
      postgres-files:
        condition: service_healthy
    volumes:
      - ./files-service:/app
      - files_storage:/app/storage
    networks:
      - app-network
    restart: unless-stopped

  projects-service:
    build:
      context: ./projects-service
      dockerfile: Dockerfile
    container_name: projects-service
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-db:5432/postgres-db
      - FILES_SERVICE_URL=http://files-service:8006
      - AUTH_SERVICE_URL=http://auth-service:8002
    depends_on:
      postgres-db:
        condition: service_healthy
    volumes:
      - ./projects-service:/app
    networks:
      - app-network
    restart: unless-stopped

  generator-service:
    build:
      context: ./generator-service
      dockerfile: Dockerfile
    container_name: generator-service
    ports:
      - "8005:8005"
    environment:
      - SERVICE_NAME=generator-service
      - LOG_LEVEL=INFO
      - PROJECTS_SERVICE_URL=http://projects-service:8004
      - FILES_SERVICE_URL=http://files-service:8006
      - MIN_CONFIDENCE_SCORE=0.5
      - AUTO_MAP_THRESHOLD=0.7
    volumes:
      - ./generator-service:/app
    networks:
      - app-network
    restart: unless-stopped

  # Фронтен-service:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: frontend-service
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "wget",
  #         "--no-verbose",
  #         "--tries=1",
  #         "--spider",
  #         "http://localhost:5173",
  #       ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Nginx (запускается после фронтенда)
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      # frontend-service:
      #   condition: service_healthy
      bff-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network

  # CloudPub (запускается после nginx)
  cloudpub:
    image: cloudpub/cloudpub:latest
    platform: linux/amd64
    network_mode: "bridge"
    environment:
      - TOKEN=${CLOUDPUB_TOKEN}
    command: publish http host.docker.internal:80
    volumes:
      - cloudpub-config:/home/cloudpub/.cloudpub
    depends_on:
      - nginx

volumes:
  cloudpub-config:
  rabbitmq_data:
  postgres_db_data:
  postgres_files_data:
  files_storage:

networks:
  app-network:
    driver: bridge
