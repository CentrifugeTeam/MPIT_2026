import { useMutation, useQueryClient } from "@tanstack/react-query";
import { loginUser, getCurrentUser } from "../api/authApi";
import { useUserStore } from "@/store/userStore";
import { useToast } from "@/shared/hooks/useToast";
import { useTranslation } from "react-i18next";
import type { LoginRequest, LoginResponse } from "../types/auth.types";

export const useLogin = () => {
  const { setTokens, setUser } = useUserStore();
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const { t } = useTranslation();

  return useMutation<LoginResponse, Error, LoginRequest>({
    mutationFn: async (credentials: LoginRequest) => {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω
      const loginData = await loginUser(credentials);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ —Ç–æ–∫–µ–Ω–∞
      setTokens(loginData.access_token, loginData.refresh_token);

      try {
        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = await getCurrentUser();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store
        setUser(userData);

        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:", userData);
        console.log("üîë –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (access + refresh)");

        return loginData;
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTokens("", "");
        throw error;
      }
    },
    onSuccess: () => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast.success(t("success.auth.login"));

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      queryClient.invalidateQueries({ queryKey: ["auth", "currentUser"] });
    },
    onError: () => {
      // Axios interceptor —É–∂–µ –ø–æ–∫–∞–∂–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast.error(t("errors.auth.loginFailed"));
    },
  });
};
