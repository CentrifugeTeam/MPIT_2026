import { useMutation, useQueryClient } from "@tanstack/react-query";
import { loginUser } from "../api/authApi";
import { useUserStore } from "@/store/userStore";
import { useToast } from "@/shared/hooks/useToast";
import { useTranslation } from "react-i18next";
import type { LoginRequest, LoginResponse } from "../types/auth.types";

export const useLogin = () => {
  const { setTokens } = useUserStore();
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const { t } = useTranslation();

  return useMutation<LoginResponse, Error, LoginRequest>({
    mutationFn: async (credentials: LoginRequest) => {
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å - –ª–æ–≥–∏–Ω
      const loginData = await loginUser(credentials);
      return loginData;
    },
    onSuccess: (loginData) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ª–æ–≥–∏–Ω–µ
      setTokens(loginData.access_token, loginData.refresh_token);

      console.log("üîë –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (access + refresh)");

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast.success(t("success.auth.login"));

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      queryClient.invalidateQueries({ queryKey: ["auth", "currentUser"] });
    },
    // onError —É–±—Ä–∞–Ω - axios interceptor –ø–æ–∫–∞–∂–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
  });
};
