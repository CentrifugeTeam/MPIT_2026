#!/usr/bin/env python3
"""
–¢–µ—Å—Ç generator-service –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ï–ü–ì–£

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ —Ñ–∞–π–ª–∞—Ö –≥–æ—Å—É—Å–ª—É–≥:
- JSON —Å—Ö–µ–º–∞ —É—Å–ª—É–≥–∏ (18k —Å—Ç—Ä–æ–∫)
- XSD —Å—Ö–µ–º–∞ –≤–µ–¥–æ–º—Å—Ç–≤–∞
"""

import json
import sys
from pathlib import Path

project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from app.services.json_parser import JsonSchemaParser
from app.services.xsd_parser import XsdSchemaParser
from app.services.field_mapper import FieldMapper
from app.services.vm_generator import VmTemplateGenerator


def read_file(file_path: str) -> str:
    """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    with open(file_path, 'r', encoding='utf-8') as f:
        return f.read()


def print_separator():
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    print("\n" + "="*80 + "\n")


def test_json_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å—Ö–µ–º—ã –ï–ü–ì–£"""
    print("üîç –¢–ï–°–¢ 1: –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å—Ö–µ–º—ã –ï–ü–ì–£")
    print_separator()
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É - –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 3 —É—Ä–æ–≤–Ω—è (app/test -> app -> generator-service -> workspace root)
    json_file = Path(__file__).parent.parent.parent.parent / "doc/test/files/–≥–æ—Å—É—Å–ª—É–≥–∏/–±–µ‚Ä¢—í‚Ä† –≥–±–Ç–≥¬£¬Æ.json"
    
    if not json_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
        return None
    
    print(f"üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {json_file.name}")
    content = read_file(str(json_file))
    print(f"‚úì –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤ ({len(content.splitlines()):,} —Å—Ç—Ä–æ–∫)")
    
    # –ü–∞—Ä—Å–∏–Ω–≥
    parser = JsonSchemaParser()
    try:
        print("\n‚öôÔ∏è  –ü–∞—Ä—Å–∏–º JSON —Å—Ö–µ–º—É...")
        result = parser.parse(content)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {result.total_fields}")
        print(f"üìä –í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: {result.schema_version or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
        print("\nüìã –ü–µ—Ä–≤—ã–µ 10 –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π:")
        for i, field in enumerate(result.fields[:10], 1):
            label = field.label[:50] + "..." if field.label and len(field.label) > 50 else field.label
            print(f"  {i}. ID: {field.id}")
            print(f"     Label: {label}")
            print(f"     Type: {field.type}")
            print(f"     Path: {field.path}")
            print()
        
        if result.total_fields > 10:
            print(f"  ... –∏ –µ—â–µ {result.total_fields - 10} –ø–æ–ª–µ–π")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return None


def test_xsd_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ XSD —Å—Ö–µ–º—ã"""
    print("\nüîç –¢–ï–°–¢ 2: –ü–∞—Ä—Å–∏–Ω–≥ XSD —Å—Ö–µ–º—ã")
    print_separator()
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É - –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 3 —É—Ä–æ–≤–Ω—è
    xsd_file = Path(__file__).parent.parent.parent.parent / "doc/test/files/–≥–æ—Å—É—Å–ª—É–≥–∏/–±–µ‚Ä¢—í‚Ä† “ê¬Æ¬ß‚Ä† –±“ê‚Ä¢¬ß‚Ä¢‚â†¬Æ¬©.txt"
    
    if not xsd_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {xsd_file}")
        return None
    
    print(f"üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {xsd_file.name}")
    content = read_file(str(xsd_file))
    print(f"‚úì –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤ ({len(content.splitlines()):,} —Å—Ç—Ä–æ–∫)")
    
    # –ü–∞—Ä—Å–∏–Ω–≥
    parser = XsdSchemaParser()
    try:
        print("\n‚öôÔ∏è  –ü–∞—Ä—Å–∏–º XSD —Å—Ö–µ–º—É...")
        result = parser.parse(content)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {result.total_elements}")
        print(f"üìä –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {result.root_element}")
        print(f"üìä Namespace: {result.namespace}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print("\nüìã –ü–µ—Ä–≤—ã–µ 10 –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for i, element in enumerate(result.elements[:10], 1):
            desc = element.description[:50] + "..." if element.description and len(element.description) > 50 else element.description
            print(f"  {i}. Name: {element.name}")
            print(f"     Type: {element.type}")
            print(f"     Required: {element.required}")
            if desc:
                print(f"     Description: {desc}")
            print()
        
        if result.total_elements > 10:
            print(f"  ... –∏ –µ—â–µ {result.total_elements - 10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return None


def test_field_mapping(parsed_json, parsed_xsd):
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞"""
    print("\nüîç –¢–ï–°–¢ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π")
    print_separator()
    
    if not parsed_json or not parsed_xsd:
        print("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤")
        return None
    
    mapper = FieldMapper()
    
    try:
        print("‚öôÔ∏è  –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥...")
        mappings, unmapped_json, unmapped_xml = mapper.auto_map(parsed_json, parsed_xsd)
        
        print(f"\n‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –°–º–∞–ø–ª–µ–Ω–æ –ø–æ–ª–µ–π: {len(mappings)}")
        print(f"‚ö†Ô∏è  –ù–µ—Å–º–∞–ø–ª–µ–Ω–Ω—ã—Ö JSON –ø–æ–ª–µ–π: {len(unmapped_json)}")
        print(f"‚ö†Ô∏è  –ù–µ—Å–º–∞–ø–ª–µ–Ω–Ω—ã—Ö XML —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(unmapped_xml)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ confidence score
        if mappings:
            high_confidence = [m for m in mappings if m.confidence_score >= 0.8]
            medium_confidence = [m for m in mappings if 0.5 <= m.confidence_score < 0.8]
            low_confidence = [m for m in mappings if m.confidence_score < 0.5]
            
            print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
            print(f"  üü¢ –í—ã—Å–æ–∫–∞—è (‚â•0.8): {len(high_confidence)} ({len(high_confidence)/len(mappings)*100:.1f}%)")
            print(f"  üü° –°—Ä–µ–¥–Ω—è—è (0.5-0.8): {len(medium_confidence)} ({len(medium_confidence)/len(mappings)*100:.1f}%)")
            print(f"  üî¥ –ù–∏–∑–∫–∞—è (<0.5): {len(low_confidence)} ({len(low_confidence)/len(mappings)*100:.1f}%)")
            
            # –¢–æ–ø-10 –ª—É—á—à–∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤
            print(f"\nüéØ –¢–û–ü-10 –ª—É—á—à–∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤:")
            sorted_mappings = sorted(mappings, key=lambda m: m.confidence_score, reverse=True)
            for i, m in enumerate(sorted_mappings[:10], 1):
                label = m.json_field_label[:40] + "..." if m.json_field_label and len(m.json_field_label) > 40 else m.json_field_label
                print(f"  {i}. {m.json_field_id} ‚Üí {m.xml_element_name}")
                print(f"     Label: {label}")
                print(f"     Confidence: {m.confidence_score:.2f}")
                print()
            
            # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
            if low_confidence:
                print(f"\n‚ö†Ô∏è  –ü–µ—Ä–≤—ã–µ 5 –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (—Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏):")
                for i, m in enumerate(low_confidence[:5], 1):
                    label = m.json_field_label[:40] + "..." if m.json_field_label and len(m.json_field_label) > 40 else m.json_field_label
                    print(f"  {i}. {m.json_field_id} ‚Üí {m.xml_element_name}")
                    print(f"     Label: {label}")
                    print(f"     Confidence: {m.confidence_score:.2f} ‚ö†Ô∏è")
                    print()
        
        return mappings
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return None


def test_template_generation(mappings, parsed_xsd):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VM —à–∞–±–ª–æ–Ω–∞"""
    print("\nüîç –¢–ï–°–¢ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VM —à–∞–±–ª–æ–Ω–∞")
    print_separator()
    
    if not mappings or not parsed_xsd:
        print("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤")
        return None
    
    generator = VmTemplateGenerator()
    
    try:
        print("‚öôÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Velocity —à–∞–±–ª–æ–Ω...")
        template = generator.generate(
            mappings=mappings,
            xsd_structure=parsed_xsd,
            include_comments=True,
            include_null_checks=True
        )
        
        line_count = len(template.split('\n'))
        print(f"\n‚úÖ –®–∞–±–ª–æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìä –°—Ç—Ä–æ–∫ –≤ —à–∞–±–ª–æ–Ω–µ: {line_count}")
        print(f"üìä –°–∏–º–≤–æ–ª–æ–≤: {len(template):,}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–≤ –ø–∞–ø–∫—É test)
        output_file = Path(__file__).parent / "output_generated_template.vm"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(template)
        print(f"\nüíæ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫
        print(f"\nüìÑ –ü–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫ —à–∞–±–ª–æ–Ω–∞:")
        print("-" * 80)
        for line in template.split('\n')[:50]:
            print(line)
        print("-" * 80)
        
        return template
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("‚ïî" + "‚ïê" * 78 + "‚ïó")
    print("‚ïë" + " " * 20 + "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GENERATOR-SERVICE" + " " * 28 + "‚ïë")
    print("‚ïë" + " " * 25 + "–Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ï–ü–ì–£" + " " * 30 + "‚ïë")
    print("‚ïö" + "‚ïê" * 78 + "‚ïù")
    
    # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ JSON
    parsed_json = test_json_parsing()
    
    # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ XSD
    parsed_xsd = test_xsd_parsing()
    
    # –¢–µ—Å—Ç 3: –ú–∞–ø–ø–∏–Ω–≥
    mappings = test_field_mapping(parsed_json, parsed_xsd)
    
    # –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
    template = test_template_generation(mappings, parsed_xsd)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "‚ïî" + "‚ïê" * 78 + "‚ïó")
    print("‚ïë" + " " * 30 + "–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢" + " " * 34 + "‚ïë")
    print("‚ïö" + "‚ïê" * 78 + "‚ïù")
    
    tests_passed = sum([
        parsed_json is not None,
        parsed_xsd is not None,
        mappings is not None,
        template is not None
    ])
    
    print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/4")
    
    if tests_passed == 4:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìù –í—ã–≤–æ–¥—ã:")
        print("  ‚úì JSON Parser —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –ï–ü–ì–£")
        print("  ‚úì XSD Parser –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã")
        print("  ‚úì Field Mapper –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥")
        print("  ‚úì VM Generator —Å–æ–∑–¥–∞–µ—Ç Velocity —à–∞–±–ª–æ–Ω")
        print(f"\n  –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {parsed_json.total_fields if parsed_json else 0}")
        print(f"  –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {parsed_xsd.total_elements if parsed_xsd else 0}")
        print(f"  –°–º–∞–ø–ª–µ–Ω–æ: {len(mappings) if mappings else 0}")
        print(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(template.split(chr(10))) if template else 0}")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("–°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ")
    
    print("\n" + "="*80)


if __name__ == "__main__":
    main()

