services:
  # Инфраструктура (запускается первой)
  postgres-db-prod:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq-prod:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Бэкенд сервисы (запускаются после инфраструктуры)
  auth-service-prod:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      target: production
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=postgres-db
    depends_on:
      postgres-db-prod:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  bff-service-prod:
    build:
      context: ./bff-service
      dockerfile: Dockerfile
      target: production
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service-prod:8002
      - NOTIFICATION_SERVICE_URL=http://notification-service-prod:8007
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - auth-service-prod
    networks:
      - app-network
    restart: unless-stopped

  notification-service-prod:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      target: production
    container_name: notification-service
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=postgres-db
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      rabbitmq-prod:
        condition: service_healthy
      postgres-db-prod:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Фронтенд (запускается после бэкенда)
  frontend-service-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5173",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx (запускается после фронтенда)
  nginx-prod:
    image: nginx:latest
    container_name: nginx-prod
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/default.prod.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      bff-service-prod:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network

  # CloudPub (запускается после nginx)
  cloudpub-prod:
    image: cloudpub/cloudpub:latest
    platform: linux/amd64
    network_mode: "bridge"
    environment:
      - TOKEN=${CLOUDPUB_TOKEN}
    command: publish http host.docker.internal:80
    volumes:
      - cloudpub-config:/home/cloudpub/.cloudpub
    depends_on:
      - nginx-prod

volumes:
  cloudpub-config:
  rabbitmq_data:
  postgres_db_data:

networks:
  app-network:
    driver: bridge
